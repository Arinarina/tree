#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
 
int main() {
	pid_t  p1, pid, pid1, pid2, pid3, pid4, pid5, pid6, ppid1, ppid2, ppid3, ppid4, ppid5, ppid6;
	pid = getpid();
	p1 = fork();
	if (p1 == -1) {
		printf("Ошибка\n");
		exit(1);
	}
	else if (p1 == 0) {
		pid1 = getpid();
		ppid1 = getppid();
		printf("Процесс Proc номер: %d, порождает потомка номер: %d\n", (int)pid, (int)pid1);
		printf("Процесс-родитель для Proc1 номер: %d, процесс PProc номер: %d\n", (int)pid1, (int)ppid1);
		pid_t p4;
		p4 = fork();
		if (p4 == -1) {
			printf("Ошибка:\n");
			exit(0);
		}
		else if (p4 == 0) {
			pid4 = getpid();
			ppid4 = getppid();
			printf("Процесс Proc1 номер: %d, порождает потомка номер: %d\n", (int)pid1, (int)pid4);
			printf("Процесс-родитель для Proc4 номер: %d,процесс PProc номер: %d\n", (int)pid4, (int)ppid4);
		}
		else sleep(1);
	}
	else
	{
		pid_t p2;
		p2 = fork();
		if (p2 == -1) {
			printf("Ошибка\n");
			exit(1);
		}
		else if (p2 == 0) {
			pid2 = getpid();
			ppid2 = getppid();
			printf("процесс Proc номер: %d,порождает потомка номер: %d\n", (int)pid, (int)pid2);
			printf("Процесс-родитель для Proc2 номер: %d,процесс PProc номер: %d\n", (int)pid2, (int)ppid2);
		}
		else
		{
			pid_t p3;
			p3 = fork();
			if (p3 == -1) {
				printf("Ошибка\n");
				exit(1);
			}
			else if (p3 == 0) {
				pid3 = getpid();
				ppid3 = getppid();
				printf("процесс Proc номер: %d,порождает потомка номер: %d\n", (int)pid, (int)pid3);
				printf("Процесс-родитель для Proc3 номер: %d,процесс PProc номер: %d\n", (int)pid3, (int)ppid3);
				pid_t p5;
				p5 = fork();
				if (p5 == -1) {
					printf("Ошибка:\n");
					exit(0);
				}
				else if (p5 == 0) {
					pid5 = getpid();
					ppid5 = getppid();
					printf("процесс Proc3 номер: %d, порождает потомка номер: %d\n", (int)pid3, (int)pid5);
					printf("Процесс-родитель для Proc5 номер: %d,процесс PProc номер: %d\n", (int)pid5, (int)ppid5);
				}
				else
				{
					pid_t p6;
					p6 = fork();
					if (p6 == -1) {
						printf("Ошибка:\n");
						exit(0);
					}
					else if (p6 == 0) {
						pid6 = getpid();
						ppid6 = getppid();
						printf("процесс Proc3 номер: %d, порождает потомка номер: %d\n", (int)pid3, (int)pid6);
						printf("Процесс-родитель для Proc6 номер: %d,процесс PProc номер: %d\n", (int)pid6, (int)ppid6);
					}
					else sleep(1);
				}
			}
			else sleep(8);
		}
	}
	return (0);
}

#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
 
int main()
{
	pid_t p1, pid, pid1, pid2, pid3, pid4, pid5, pid6, ppid1, ppid2, ppid3, ppid4, ppid5, ppid6;
	pid = getpid();
	p1 = fork();
	if (p1 == -1) {
		printf("Ошибка\n");
		exit(1);
	}
	else if (p1 == 0) {
		pid1 = getpid();
		ppid1 = getppid();
		printf("Процесс Proc номер: %d, порождает потомка номер: %d\n", (int)pid, (int)pid1);
		printf("Процесс-родитель для Proc1 номер: %d,процесс PProc номер: %d\n", (int)pid1, (int)ppid1);
		pid_t p2;
		p2 = fork();
		if (p2 == -1) {
			printf("Ошибка:\n");
			exit(0);
		}
		else if (p2 == 0) {
			pid2 = getpid();
			ppid2 = getppid();
			printf("Процесс Proc1 номер: %d, порождает потомка номер: %d\n", (int)pid1, (int)pid2);
			printf("Процесс-родитель для Proc2 номер: %d, процесс PProc номер: %d\n", (int)pid2, (int)ppid2);
			pid_t p3;
			p3 = fork();
			if (p3 == -1) {
				printf("Ошибка\n");
				exit(-1);
			}
			else if (p3 == 0) {
				pid3 = getpid();
				ppid3 = getppid();
				printf("Процесс Proc2 номер: %d, порождает потомка номер: %d\n", (int)pid2, (int)pid3);
				printf("Процесс-родитель для Proc3 номер: %d, процесс PProc номер: %d\n", (int)pid3, (int)ppid3);
				pid_t p4;
				p4 = fork();
				if (p4 == -1) {
					printf("Ошибка\n");
					exit(-2);
				}
				else if (p4 == 0) {
					pid4 = getpid();
					ppid4 = getppid();
					printf("Процесс Proc3 номер: %d, порождает потомка номер: %d\n", (int)pid3, (int)pid4);
					printf("Процесс-родитель для Proc4 номер: %d, процесс PProc номер: %d\n", (int)pid4, (int)ppid4);
				}
				else
				{
					pid_t p5;
					p5 = fork();
					if (p5 == -1) {
						printf("Ошибка\n");
						exit(-2);
					}
					else if (p5 == 0) {
						pid5 = getpid();
						ppid5 = getppid();
						printf("Процесс Proc3 номер: %d, порождает потомка номер: %d\n", (int)pid3, (int)pid5);
						printf("Процесс-родитель для Proc5 номер: %d, процесс PProc номер: %d\n", (int)pid5, (int)ppid5);
						pid_t p6;
						p6 = fork();
						if (p6 == -1) {
							printf("Ошибка\n");
							exit(-3);
						}
						else if (p6 == 0) {
							pid6 = getpid();
							ppid6 = getppid();
							printf("Процесс Proc5 номер: %d, порождает потомка номер: %d\n", (int)pid5, (int)pid6);
							printf("Процесс-родитель для Proc6 номер: %d, процесс PProc номер: %d\n", (int)pid6, (int)ppid6);
						}
					}
					sleep(8);
				}
			}
			else
			{
				sleep(3);
			}
		}
		else
		{
			sleep(1);
		}
	}
	else
	{
		sleep(1);
	}
	return (0);
}
